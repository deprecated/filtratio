#+SEQ_TODO: TODO(t) STARTED(s) WAITING(w@) | DONE(d) CANCELED(c@)
#+OPTIONS: ^:{}   
Notes on implementation of =nebulio= python package.


* Roadmap for nebulio

** STARTED Version 0.1

*** DONE Basic functionality with homogeneous filterset
CLOSED: [2014-08-06 Wed 13:35]
+ All filters with the same instrument: wfpc2, acs, or wfc3

*** Allow mixing of different instruments

*** Write some tests
:LOGBOOK:
CLOCK: [2014-08-13 Wed 12:19]--[2014-08-13 Wed 13:04] =>  0:45
:END:
+ use py.test
+ Useful docs:
  + [[http://astropy.readthedocs.org/en/latest/development/testguide.html][Astropy testing guidelines]]
  + [[http://pytest.org/latest/getting-started.html][py.test docs]]
**** Testing versus the old 

** Future plans
*** Greater variety of synphot observation modes
* [6/8] Project Management Scaffolding
:LOGBOOK:
CLOCK: [2014-08-13 Wed 13:04]--[2014-08-13 Wed 17:57] =>  4:53
:END:
I am implementing most of Jeff Knupp's [[http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/][recommendations]] for project
  management:
- [X] YES: setuptools
- [X] YES: git/github
- [X] NO: git-flow - my package just seems too small to bother with that yet
- [ ] SORT-OF: virtualenv - I'm using anaconda
  - Still need to make a virtual environment
- [X] YES py.test
  - Now working! [2014-08-14 Thu]
- [X] YES sphinx
- [ ] MAYBE ReadTheDocs
  - once I have the docs in better shape
- [X] sort out imports
  - No relative imports any more 
    - AAARGH!
    - try to follow recommendations [[http://guide.python-distribute.org/creation.html][here]] (now that I look at it again, it has nothing to say about imports ...)
  - [X] Use absolute imports instead?
    - That's what [[http://blog.habnab.it/blog/2013/07/21/python-packages-and-you/][this page]] recommends


* Interface with pysynphot

** Useful documentation
+ http://stsdas.stsci.edu/pysynphot/
  + [[http://www.stsci.edu/hst/HST_overview/documents/synphot/hst_synphot_cover.html][(py)SYNPHOT Data User's Guide (2008)]]


** TODO Electrons vs counts
+ Some instruments use counts/s
+ Others (e.g., ACS) use electrons/s
  
** TODO How to access the instrument-dependent normalization
:LOGBOOK:
CLOCK: [2014-08-13 Wed 10:30]--[2014-08-13 Wed 10:50] =>  0:20
:END:
+ This is important when using a filterset that combines, e.g., ACS
  and WFPC2 observations
+ I think, this is is just the the pixel area
+ Everything else is already folded into the bandpass throughput I think


* DONE Making sure we are up to date with CDBS
CLOSED: [2014-08-15 Fri 14:47]
:LOGBOOK:
CLOCK: [2014-08-15 Fri 13:37]--[2014-08-15 Fri 14:47] =>  1:10
:END:
+ We seem to have an old version of CDBS
+ Up to date files are here: ftp.stsci.edu/cdbs/
  + I am downloading [[http://www.stsci.edu/ftp/cdbs/tarfiles/synphot1.tar.gz][synphot1.tar.gz]], which I think is all we need.
+ Yep, now installed in =~/Work/CDBS=
+ Other data files are not here yet - synphot5 is taking for ever
+ [ ] How are we going to keep up to date with these files in the future

* Implementation of the tests
** DONE How to run the tests
CLOSED: [2014-08-14 Thu 22:52]
:LOGBOOK:
CLOCK: [2014-08-14 Thu 17:57]--[2014-08-14 Thu 22:52] =>  4:55
:END:
#+BEGIN_SRC sh
python setup.py test
#+END_SRC
And that's it. (Do need to be in right virtual env, or at least set the path to python.)
*** [2/2] Older notes 
+ Rule #1 :: Don't try just running them in the tests/ folder
  + This can give on Python 3
    #+BEGIN_EXAMPLE
    SystemError: Parent module '' not loaded, cannot perform relative import
    #+END_EXAMPLE
  + Or on Python 2
    #+BEGIN_EXAMPLE
    ValueError: Attempted relative import in non-package
    #+END_EXAMPLE
  + So the problem is partly that I was trying to use relative imports, which is rather tricky
+ Rule #2 :: We can run the tests by hand using something like
  #+BEGIN_SRC sh
  ~/anaconda/envs/py27/bin/python -m nebulio.tests.test_synphot
  #+END_SRC
  + But this relies on there being a main script in the test file, which we really want to avoid, so I have now removed it
  + *Meaning this method doesn't work any more* 
+ [X] Rule #3 :: We can run py.test semi-automatically like this
  #+BEGIN_EXAMPLE
  (py27)iris:Nebulio will$ py.test
  #+END_EXAMPLE
  Note that we have to be in the right virtual environment, since this package does not work with python 3
+ [X] Rule #4 :: Finally, we should also be able to run it like this
  #+BEGIN_SRC sh
  python setup.py test
  #+END_SRC
  + This requires some stuff in =setup.py= but that is all sorted now.
** TODO [3/4] More sophisticated tests
+ [X] Try to use only one assert per function
+ [X] Learn how to use fixtures
  + also [[http://pytest.org/latest/yieldfixture.html#yieldfixture][yield fixture mechanism]]
+ [X] Learn how to use parameterized fixtures
+ [ ] Time the tests

** STARTED [2/3] Testing wfc3_utils
:LOGBOOK:
- State "WAITING"    from ""           [2014-08-15 Fri 13:38] \\
  Need to update the CDBS database first
:END:
+ This is installed as legacy/wfc3_utils.py
+ I changed it to use setuptools =pkg_resources.resource_stream= for
  opening the data files
  + This means it should still work when it is installed inside an egg
  + See [[https://pythonhosted.org/setuptools/pkg_resources.html][here]] and [[http://peak.telecommunity.com/DevCenter/PythonEggs#accessing-package-resources][here]]
+ [X] Test that the tests work
+ [X] Test that the filter parameters agree
+ [ ] Test that the alpha, beta, gamma agree


* Implementation of Documentation
:LOGBOOK:
- Note taken on [2014-08-04 Mon 13:06] \\
  This is all new to me and is causing some pain
CLOCK: [2014-08-04 Mon 11:14]--[2014-08-04 Mon 13:06] =>  1:52
:END:
+ I am going to try and use sphinx and autodoc
  + Most of the documentation will be extracted automatically from docstrings in the source files.
  + I am also going to try and follow the way that numpy does things
    + It is a more verbose style that looks better in plain text than the standard sphinx style
    + It requires the use of =numpydoc=
    + [[http://stackoverflow.com/questions/17397483/how-does-numpy-process-docstrings-into-sphinx-documentation-for-parameters][stackoverflow answer]] explaining how to use numpydoc
    + [[https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt][Guide]] to NumPy/SciPy Documentation
    + [[https://github.com/numpy/numpy/blob/master/doc/example.py][Example ]]source file
    + Jeff Knup's [[http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/][instructions]] on how to use autodoc
** TODO [1/6] Subtasks towards getting the docs sorted
:LOGBOOK:
CLOCK: [2014-08-04 Mon 13:43]--[2014-08-04 Mon 14:43] =>  1:00
CLOCK: [2014-08-04 Mon 13:06]--[2014-08-04 Mon 13:43] =>  0:37
:END:
+ [X] Get basic sphinx autodoc functionality working
+ [-] Convert all module/class/function doc strings to numpydoc format
+ [ ] Add any necessary documentation outside of source code
+ [ ] Import the astropy doc config
  + This gives a whole load of new RST directives that look useful
  + This didn't work on a first attempt - missing icons
  + But I don't really want to use their icons
    + [ ] I should make my own
  + Also, astropy 0.4 have these inside astropy package, but the dev
  version has moved them to astropy_helpers package
+ [ ] Choose a nice style
  + [ ] Switch to the astropy style?
+ [ ] Export to readthedocs?
** Log of steps for autogenerating the docs
Installing prerequisites
#+BEGIN_SRC sh
source activate py27
conda install numpydoc
#+END_SRC

Install package in dev mode
#+BEGIN_SRC sh
python setup.py develop
#+END_SRC

Running autodoc
#+BEGIN_SRC sh
sphinx-apidoc -F -o docs nebulio
#+END_SRC

Edit =docs/conf.py= to include
#+BEGIN_SRC python
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode', 'numpydoc']
#+END_SRC

And add the following to automagically set the =release= and =version= vars.  This is copied from Jeff Knupp's sandman package. 

#+BEGIN_SRC python
import pkg_resources
try:
    release = pkg_resources.get_distribution('nebulio').version
except pkg_resources.DistributionNotFound:
    print ('To build the documentation, The distribution information of sandman') 
    print ('Has to be available.  Either install the package into your'         ) 
    print ('development environment or run "setup.py develop" to setup the'     ) 
    print ('metadata.  A virtualenv is recommended!'                            ) 
    sys.exit(1)
del pkg_resources

version = '.'.join(release.split('.')[:2])
#+END_SRC

Change the html theme
#+BEGIN_SRC python
# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'
#+END_SRC

Compile and view the HTML documentation
#+BEGIN_SRC sh
(cd docs; make html)
open docs/_build/html/index.html
#+END_SRC

Compile and view the PDF documentation
#+BEGIN_SRC sh
(cd docs; make latexpdf)
open docs/_build/latex/nebulio.pdf
#+END_SRC

