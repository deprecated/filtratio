#+SEQ_TODO: TODO(t) STARTED(s) WAITING(w@) | DONE(d) CANCELED(c@)
#+OPTIONS: ^:{}   
Notes on implementation of =nebulio= python package.


* Roadmap for nebulio

** STARTED Version 0.1

*** DONE Basic functionality with homogeneous filterset
CLOSED: [2014-08-06 Wed 13:35]
+ All filters with the same instrument: wfpc2, acs, or wfc3

*** Allow mixing of different instruments

*** Write some tests
+ use py.test
+ Useful docs:
  + [[http://astropy.readthedocs.org/en/latest/development/testguide.html][Astropy testing guidelines]]
  + 
** Future plans
*** Greater variety of synphot observation modes
* [4/7] Project Management Scaffolding
I am implementing most of Jeff Knupp's [[http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/][recommendations]] for project
  management:
- [X] YES: setuptools
- [X] YES: git/github
- [X] NO: git-flow - my package just seems too small to bother with that yet
- [ ] SORT-OF: virtualenv - I'm using anaconda
  - Still need to make a virtual environment
- [-] YES py.test
  - at least, I intend to
- [X] YES sphinx
- [ ] MAYBE ReadTheDocs
  - once I have the docs in better shape


* Interface with pysynphot

** Useful documentation
+ http://stsdas.stsci.edu/pysynphot/
  + [[http://www.stsci.edu/hst/HST_overview/documents/synphot/hst_synphot_cover.html][(py)SYNPHOT Data User's Guide (2008)]]


** TODO Electrons vs counts
+ Some instruments use counts/s
+ Others (e.g., ACS) use electrons/s
  
** TODO How to access the instrument-dependent normalization
+ This is important when using a filterset that combines, e.g., ACS
  and WFPC2 observations
+ I think, this is is just the the pixel area
+ Everything else is already folded into the bandpass throughput I think

* Implementation of Documentation
:LOGBOOK:
- Note taken on [2014-08-04 Mon 13:06] \\
  This is all new to me and is causing some pain
CLOCK: [2014-08-04 Mon 11:14]--[2014-08-04 Mon 13:06] =>  1:52
:END:
+ I am going to try and use sphinx and autodoc
  + Most of the documentation will be extracted automatically from docstrings in the source files.
  + I am also going to try and follow the way that numpy does things
    + It is a more verbose style that looks better in plain text than the standard sphinx style
    + It requires the use of =numpydoc=
    + [[http://stackoverflow.com/questions/17397483/how-does-numpy-process-docstrings-into-sphinx-documentation-for-parameters][stackoverflow answer]] explaining how to use numpydoc
    + [[https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt][Guide]] to NumPy/SciPy Documentation
    + [[https://github.com/numpy/numpy/blob/master/doc/example.py][Example ]]source file
    + Jeff Knup's [[http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/][instructions]] on how to use autodoc
** TODO [1/6] Subtasks towards getting the docs sorted
:LOGBOOK:
CLOCK: [2014-08-04 Mon 13:43]
CLOCK: [2014-08-04 Mon 13:06]--[2014-08-04 Mon 13:43] =>  0:37
:END:
+ [X] Get basic sphinx autodoc functionality working
+ [-] Convert all module/class/function doc strings to numpydoc format
+ [ ] Add any necessary documentation outside of source code
+ [ ] Import the astropy doc config
  + This gives a whole load of new RST directives that look useful
  + This didn't work on a first attempt - missing icons
  + But I don't really want to use their icons
    + [ ] I should make my own
  + Also, astropy 0.4 have these inside astropy package, but the dev
  version has moved them to astropy_helpers package
+ [ ] Choose a nice style
  + [ ] Switch to the astropy style?
+ [ ] Export to readthedocs?
** Log of steps for autogenerating the docs
Installing prerequisites
#+BEGIN_SRC sh
source activate py27
conda install numpydoc
#+END_SRC

Install package in dev mode
#+BEGIN_SRC sh
python setup.py develop
#+END_SRC

Running autodoc
#+BEGIN_SRC sh
sphinx-apidoc -F -o docs nebulio
#+END_SRC

Edit =docs/conf.py= to include
#+BEGIN_SRC python
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode', 'numpydoc']
#+END_SRC

And add the following to automagically set the =release= and =version= vars.  This is copied from Jeff Knupp's sandman package. 

#+BEGIN_SRC python
import pkg_resources
try:
    release = pkg_resources.get_distribution('nebulio').version
except pkg_resources.DistributionNotFound:
    print ('To build the documentation, The distribution information of sandman') 
    print ('Has to be available.  Either install the package into your'         ) 
    print ('development environment or run "setup.py develop" to setup the'     ) 
    print ('metadata.  A virtualenv is recommended!'                            ) 
    sys.exit(1)
del pkg_resources

version = '.'.join(release.split('.')[:2])
#+END_SRC

Change the html theme
#+BEGIN_SRC python
# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'
#+END_SRC

Compile and view the HTML documentation
#+BEGIN_SRC sh
(cd docs; make html)
open docs/_build/html/index.html
#+END_SRC

Compile and view the PDF documentation
#+BEGIN_SRC sh
(cd docs; make latexpdf)
open docs/_build/latex/nebulio.pdf
#+END_SRC

